#version 450

#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_buffer_reference : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_scalar_block_layout : enable

layout(binding = 0, rgba32f) uniform image2D ColorImage;
layout(binding = 1)          uniform sampler2D Texture;

layout(buffer_reference, std430, buffer_reference_align = 4) buffer IndexBufferReference {
    uint element;
};

layout(buffer_reference, std430, buffer_reference_align = 4) buffer VertexBufferReference {
    vec2 position;
    vec2 texcoord;
    uint color;
};

layout(push_constant) uniform RasterizerPushConstants {
    uint64_t    index_buffer_reference;
    uint64_t    vertex_buffer_reference;
    vec2        viwport_scale;
    uint        index_offset;
    float       clip_rect_min_x;
    float       clip_rect_min_y;
    float       clip_rect_max_x;
    float       clip_rect_max_y;
} state;

float area(vec2 v1, vec2 v2, vec2 v3) {
    vec2 a = v2 - v1;
    vec2 b = v3 - v1;
    return a.x * b.y - b.x * a.y;
}

vec4 unpack(uint color) {
    vec4 result;
    result.r = float((color >> 0) & 0xFFu) / 255.0F;
    result.g = float((color >> 8) & 0xFFu) / 255.0F;
    result.b = float((color >> 16) & 0xFFu) / 255.0F;
    result.a = float((color >> 24) & 0xFFu) / 255.0F;
    return result;
}

float triangle_area(vec2 a, vec2 b, vec2 c) {
    vec2 ab = b - a;
    vec2 ac = c - a;
    return abs(ab.x * ac.y - ab.y * ac.x) * 0.5F;
}

vec3 barycentric(vec3 v1, vec3 v2, vec3 v3, vec3 p) {
    vec3 a = vec3(v3.x - v1.x, v2.x - v1.x, v1.x - p.x);
    vec3 b = vec3(v3.y - v1.y, v2.y - v1.y, v1.y - p.y);

    vec3 u = cross(a, b);

    if (abs(u.z) < 1.0) {
        return vec3(-1.0, 1.0, 1.0);
    }

    return vec3(1.0 - (u.x + u.y) / u.z, u.y/ u.z, u.x / u.z);
}

vec4 get_min_max(vec2 v1, vec2 v2, vec2 v3) {
    vec4 min_max;
    min_max.x = min(min(v1.x, v2.x), v3.x);
    min_max.y = min(min(v1.y, v2.y), v3.y);
    min_max.z = max(max(v1.x, v2.x), v3.x);
    min_max.w = max(max(v1.y, v2.y), v3.y);
    return min_max;
}

void draw_triangle(
    in ivec2 pixel,
    in VertexBufferReference v1,
    in VertexBufferReference v2,
    in VertexBufferReference v3
) {
    vec4 Acol = unpack(v1.color);
    vec4 Bcol = unpack(v2.color);
    vec4 Ccol = unpack(v3.color);

    vec2 Atex = v1.texcoord;
    vec2 Btex = v2.texcoord;
    vec2 Ctex = v3.texcoord;

    vec3 bc = barycentric(
        vec3(v1.position * state.viwport_scale, 0.0F),
        vec3(v2.position * state.viwport_scale, 0.0F),
        vec3(v3.position * state.viwport_scale, 0.0F),
        vec3(pixel, 0.0F)
    );

    if (bc.x < 0.0 || bc.y < 0.0 || bc.z < 0.0) {
        return;
    }

    vec4 b_col = Acol * bc.x + Bcol * bc.y + Ccol * bc.z;
    vec2 b_tex = Atex * bc.x + Btex * bc.y + Ctex * bc.z;

    vec4 color = texture(Texture, b_tex) * b_col;
    if (color.a > 0.0F) {
        imageStore(ColorImage, pixel, color);
    }
}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy) + ivec2(state.clip_rect_min_x, state.clip_rect_min_y);
    ivec2 size = imageSize(ColorImage);

    if (pixel.x >= size.x || pixel.y >= size.y) {
        return;
    }

    if (pixel.x > state.clip_rect_max_x || pixel.y > state.clip_rect_max_y) {
        return;
    }

    uint i  = state.index_offset;
    uint i0 = IndexBufferReference(state.index_buffer_reference)[i + 0].element;
    uint i1 = IndexBufferReference(state.index_buffer_reference)[i + 1].element;
    uint i2 = IndexBufferReference(state.index_buffer_reference)[i + 2].element;

    draw_triangle(
        pixel,
        VertexBufferReference(state.vertex_buffer_reference)[i0],
        VertexBufferReference(state.vertex_buffer_reference)[i1],
        VertexBufferReference(state.vertex_buffer_reference)[i2]
    );
}